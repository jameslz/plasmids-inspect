#!/usr/bin/perl -w

use strict;
use warnings;
use Cwd 'abs_path';
use File::Basename;
use Switch;

my $usage = <<_EOUSAGE_;

Usage: checkm-utils <command> <arguments>
supports:

    lineage <checkm>
    profile <checkm>
    bins    <mapping_file>  <path>

_EOUSAGE_
;

if( ( scalar @ARGV) < 1){
    printf STDERR $usage;
    exit;

}

my $cmd = shift @ARGV; 
my @samples_t = ();

switch($cmd){

    case 'lineage'   { lineage_run(); };
    case 'profile'   { profile_run(); };
    case 'bins'      { bins_run(); };

}

exit;

sub lineage_run{

    if(@ARGV != 1){
        printf STDERR qq{\n[ERR] arguments number error!\n$usage};
        exit;
    }

    my ($checkm ) = @ARGV;
    lineage( $checkm );

}


sub lineage  {

  my $checkm = shift;
  open (DATA,  $checkm)   || die "$!  \n";
  
  # foreach (1..3) { <DATA> };
  print qq{#Bin Id\tMarker lineage\tCompleteness\tContamination\tStrain heterogeneity\n};
  while (<DATA>) {
      next if(/^-/ || /Bin Id/);
      chomp;
      $_ =~ s/^\s+|\s+$//g;
      my @its = split /   +/, $_;
      print qq{$its[0]\t$its[1]\t$its[11]\t$its[12]\t$its[13]\n};

  }
  close DATA;

}


sub profile_run{

    if(@ARGV != 1){
        printf STDERR qq{\n[ERR] arguments number error!\n$usage};
        exit;
    }

    my ($checkm ) = @ARGV;
    profile( $checkm );

}

sub profile  {

  my $checkm = shift;
  open (DATA,  $checkm)   || die "$!  \n";
  
  # foreach (1..7) { <DATA> };
  print qq{#Bin Id\tBin size (Mbp)\tmapped reads\t% mapped reads\tbinned populations\t% community\n};

  while (<DATA>) {
      next if(/^-/);
      next if(/^#/);
      next if(/INFO/);
      next if(/Bin Id/);
      chomp;
      $_ =~ s/^\s+|\s+$//g;
      my @its = split /   +/, $_;
      print join("\t", @its) , "\n";


  }
  close DATA;

}

sub bins_run{

    if(@ARGV != 1){
        printf STDERR qq{\n[ERR] arguments number error!\n$usage};
        exit;
    }

    my ($sample, $path) = @ARGV;
    load_sample( $sample );
    bin_stats( $path );
}


sub load_sample {

	my $sample = shift;
    open (DATA, $sample)   || die "$!  \n";
    while (<DATA>) {    
        chomp;
        next if (/^#/ || /^$/);
        my @its = split /\s+/, $_;
        push @samples_t, $its[0];
    }
    close DATA;
  
}

sub bin_stats {

	my $path = shift;
    print qq{#sample\tbins\n};

    foreach my $sample (@samples_t) {
        my $counts = `wc -l $path/$sample/$sample.tsv`;
           $counts =~ s/^\s+//;
        my ($bins) = $counts=~ /^(\d+)/;
            $bins -= 1; 
       print qq{$sample\t$bins\n};
    }

}
