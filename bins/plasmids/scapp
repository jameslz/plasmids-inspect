#!/usr/bin/perl -w

use strict;
use warnings;
use File::Basename;
use Cwd 'abs_path';

die "Usage:perl $0 <metadata>" if(@ARGV != 1);

my ( $config )           = @ARGV;

my  %metadata            = ();
profiling();

my  $project_home        =  qq{$metadata{project_home}/$metadata{project_id}/plasmids/scapp};

my  $plasclass           =  qq{$project_home/plasclass};
my  $scapp               =  qq{$project_home/scapp};
my  $runs                =  qq{$project_home/runs};
my  $report              =  qq{$project_home/report};
my  $contigs             =  qq{$project_home/contigs};

my  $datasets            =  qq{$metadata{project_home}/$metadata{project_id}/assembly/metaspades};

my  $trimming            =  (-e qq{$metadata{project_home}/$metadata{project_id}/bmtagger} ) ? 'bmtagger' : 'trimming';
my  $reads               =  qq{$metadata{project_home}/$metadata{project_id}/$trimming/reads};

my  @samples_t           = ();

my  $utils               =  dirname( abs_path($0) ) . '/../../utils';
my  $binaries            =  dirname( abs_path($0) ) . '/../../binaries';

my  $dry_run             =  0;
    $dry_run             =  1 if(exists $metadata{dry_run} && $metadata{dry_run} eq 'T');

submit();

exit;

sub profiling {

    open( PROFILE,  $config )   || die "[ERR]: can't open $config. \n";
    while(<PROFILE>){
          
        $_ =~ s/\s+$//;
        next if(/^#/ || !/^\S+/);
        my ($key, $value)  = $_ =~ /^(\S+)\s+(.+)/;
        next if($value eq '-');
        $metadata{$key}  = $value;
    
    } 
    close PROFILE;

}

sub submit {
  
    mapping_file();
    make_fs();
    # plasclass_run();
    scapp_run();
    stats_run();

}

sub mapping_file {

    open (PROFILE, qq{$metadata{mapping_file}})   || die "[ERR]: can't open $metadata{mapping_file}. \n";
    while (<PROFILE>) {
    
        $_ =~ s/\s+$//;
        next if (/^#/);
        my @its = split /\s+/,$_;
        push @samples_t , $its[0];

    }
    close PROFILE;

}

sub make_fs {
   
    my $cmd = qq{mkdir -p $runs
                          $plasclass
                          $scapp
                          $contigs
                          $report};
       $cmd =~ s/\n\s+/ /msg;
    system $cmd;

}

sub plasclass_run {

    my $sh    =  qq{$runs/plasclass.sh};
    open (EXPORT, ">$sh") || die "$sh $!\n";

    foreach my $sample ( @samples_t ) {
        print EXPORT  plasclass( $sample );
    }

    close EXPORT;
    system qq{cat $sh | $binaries/gargs -v --nlines 1 -p  1 "{}"\n} if(!$dry_run);
}

sub plasclass {
     
    my $sample =  shift;
    my $cmd    = qq{classify_fasta.py                            \
                       -f $datasets/$sample/assembly_graph.fastg \
                       -p $metadata{cpus}                        \
                       -o $plasclass/$sample.txt;\n};
        $cmd =~ s/\s+\n\s+/ /msg; 
      return $cmd;
}

sub scapp_run {

    my $sh    =  qq{$runs/scapp.sh};
    open (EXPORT, ">$sh") || die "$sh $!\n";

    foreach my $sample ( @samples_t ) {
        print EXPORT  scapp( $sample );
        print EXPORT  fmt($sample);
        print EXPORT  qstat($sample);
    }

    close EXPORT;
    system qq{cat $sh | $binaries/gargs -v --nlines 1 -p  1 "{}"\n} if(!$dry_run);
}

sub scapp {
    
    my $sample    =  shift;
    my $para      = (exists $metadata{scapp_para}) ? $metadata{scapp_para} : ' ';
    my $cmd       =  qq{scapp                                \
                           $para                             \
                           -g $datasets/$sample/assembly_graph.fastg \
                           -r1 $reads/$sample.R1.fastq.gz    \
                           -r2 $reads/$sample.R2.fastq.gz    \
                           -pc $plasclass/$sample.txt        \
                           -p $metadata{cpus}                \
                           -o $scapp/$sample ;\n};
       $cmd =~ s/\s+\n\s+/ /msg; 
    return $cmd;

}

sub fmt {
    
    my $sample    =  shift;
    my $cmd       =  qq{$binaries/fastx-utils rename           \
                          $scapp/$sample/assembly_graph.confident_cycs.fasta \
                          $sample\_P                           \
                        >$contigs/$sample.fasta;\n};
       $cmd =~ s/\s+\n\s+/ /msg; 
    return $cmd;

}

sub qstat{
    
    my $sample  = shift;
    my $cmd  = qq{$binaries/fastx-utils counts       \
                      -b                             \
                      -l $sample                     \
                      $contigs/$sample.fasta         \
                  >$report/$sample.stats.txt ;\n};
       $cmd     =~ s/\s+\n\s+/ /msg;
    return $cmd;

}

sub stats_run{
    
    my $sh = qq{$runs/stats.sh};
    
    open (EXPORT, qq{>$sh}) || die "$sh $!\n";
    print EXPORT  stats();
    close EXPORT;

    system qq{cat $sh | $binaries/gargs -v --nlines 1 -p 1 "{}"\n} if(!$dry_run);

}

sub stats {

    my $cmd = qq{cat $report/*.stats.txt                \
                  |$binaries/tsv-utils view -d -        \
                  |$binaries/tsv-utils reorder -        \
                  <(cut -f1  $metadata{mapping_file})   \
                  >$report/plasmids.stats.txt ;\n};
       $cmd =~ s/\s+\n\s+/ /msg;
    return $cmd;

}
