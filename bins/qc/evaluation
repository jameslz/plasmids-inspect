#!/usr/bin/perl -w

use strict;
use warnings;
use File::Basename;
use Cwd 'abs_path';

die "Usage:perl $0 <metadata>" if(@ARGV != 1);
my ($config)             = @ARGV;

my  %metadata            = ();
profiling();

my  $project_home        =  qq{$metadata{project_home}/$metadata{project_id}/evaluation};
my  $fastqc              =  qq{$project_home/fastqc};
my  $fqchk               =  qq{$project_home/fqchk};
my  $report              =  qq{$project_home/report};
my  $runs                =  qq{$project_home/runs};

my  @samples_t           =  ();
my  %sample_h            =  ();

my  $utils               =  dirname( abs_path($0) ) . '/../../utils';
my  $binaries            =  dirname( abs_path($0) ) . '/../../binaries';
my  $qual                = (exists $metadata{qual}) ? $metadata{qual} : 33;

my  $dry_run             =  0;
    $dry_run             =  1 if(exists $metadata{dry_run} && $metadata{dry_run} eq 'T');

submit();
exit;

sub submit {

    mapping_file();
    make_fs();
    evaluation_run();
    qstat_run();
    stats_run();

}

sub profiling {
    
    open( PROFILE,  $config )   || die "[ERR]: can't open $config. \n";
    while(<PROFILE>){
            
        $_ =~ s/\s+$//;
        next if(/^#/ || !/^\S+/);
        my ($key, $value)  = $_ =~ /^(\S+)\s+(.+)/;
        next if($value eq '-');
        $metadata{$key}  = $value;
    
    } 
    close PROFILE;

}

sub mapping_file {
    
    open (PROFILE, qq{$metadata{mapping_file}})   || die "[ERR]: can't open $metadata{mapping_file}. \n";
    while (<PROFILE>) {
        
        $_ =~ s/\s+$//;
        next if (/^#/ || /^$/);
        my @its = split /\s+/, $_;

        push @samples_t , $its[0];

        foreach my $sample (split /,/ , $its[1]) {
            push @{$sample_h{$its[0]}{data}},  qq{$metadata{raw_data}/$sample};
        }
        $sample_h{ $its[0] }{qual} = $qual;
    
    }
    close PROFILE;

}

sub make_fs {
    
    my $cmd = qq{mkdir -p $fastqc
                          $fqchk
                          $report
                          $runs};
       $cmd =~ s/\n\s+/ /msg;
    system $cmd;
}

sub evaluation_run {    
    
    my $sh   =  qq{$runs/evaluation.sh};
    open (EXPORT, ">$sh") || die "[ERR]: can't open $sh $!\n";

    foreach my $sample ( @samples_t ) {        
        foreach my $orig (qw/0  1/) {
            print EXPORT fastqc( $sample, $orig );
            print EXPORT fqchk( $sample, $orig );
            print EXPORT fqchk_base( $sample, $orig );
            print EXPORT fqchk_qual( $sample, $orig );
            print EXPORT pdf2png( $sample, $orig );
        }
    }
    
    close EXPORT;
    system qq{cat $sh | $binaries/gargs  -v --nlines 6 -p $metadata{cpus} "{}"\n} if(!$dry_run);

}

sub fastqc {
    
    my ($sample, $orig)  = @_;
    
    my $cmd = qq{mkdir -p $fastqc/$sample &&            \
                 fastqc --extract                        \
                        --nogroup                       \
                        --kmers 7                       \
                        --threads $metadata{threads}    \
                        $sample_h{$sample}{data}[$orig] \
                        -o $fastqc/$sample ;\n};
       $cmd =~ s/\s+\n\s+/ /msg; 
    
    return $cmd;
}

sub fqchk {
    
    my ($sample, $orig)  = @_;
    my $reads  = ($orig == 0) ? 'R1' : 'R2';
   
    my $cmd = qq{$binaries/fastx-utils fqchk           \
                    -q $qual                           \
                    $sample_h{$sample}{data}[$orig]    \
                >$fqchk/$sample.$reads.txt ;\n};
       $cmd =~ s/\s+\n\s+/ /msg;
    return $cmd;

}

sub fqchk_base {
   
    my ($sample, $orig)  = @_;
      $orig = ($orig == 0) ? 'R1' : 'R2';
    
    my $cmd = qq{$utils/fqchk_base.R                    \
                    $fqchk/$sample.$orig.txt            \
                    $fqchk/$sample.$orig.base.pdf       \
                    $sample.$orig ;\n};
       $cmd =~ s/\s+\n\s+/ /msg;
    return  $cmd;

}

sub fqchk_qual {
   
    my ($sample, $orig)  = @_;
      $orig = ($orig == 0) ? 'R1' : 'R2';
    
    my $cmd = qq{$utils/fqchk_qual.R                    \
                    $fqchk/$sample.$orig.txt            \
                    $fqchk/$sample.$orig.qual.pdf       \
                    $sample.$orig ;\n};
       $cmd =~ s/\s+\n\s+/ /msg;
    return  $cmd;

}

sub pdf2png {

    my ($sample, $orig)  = @_;
        $orig  = ($orig == 0) ? 'R1' : 'R2';

    my @t = ();
    
    push @t, qq{$utils/pdf2png $fqchk/$sample.$orig.base.pdf ;\n};
    push @t, qq{$utils/pdf2png $fqchk/$sample.$orig.qual.pdf ;\n};

    return join("", @t);
  
}

sub qstat_run {    
    
    my $sh   =  qq{$runs/qstat.sh};
    open (EXPORT, ">$sh") || die "[ERR]: can't open $sh $!\n";

    foreach my $sample ( @samples_t ) {        
        print EXPORT qstat( $sample );
    }
    
    close EXPORT;
    system qq{cat $sh | $binaries/gargs  -v --nlines 1 -p $metadata{cpus} "{}"\n} if(!$dry_run);

}

sub qstat {
    
    my $sample  = shift;
    
    my $cmd     = qq{cat $sample_h{$sample}{data}[0]    \
                      $sample_h{$sample}{data}[1]       \
                    |$binaries/atlas-utils fqchk        \
                      -p                                \
                      -q $qual                          \
                      -l $sample                        \
                      -                                 \
                    >$report/$sample.sequencing.stats.txt ;\n};
       $cmd     =~ s/\s+\n\s+/ /msg;
    return $cmd;

}

sub stats_run {
    
    my $sh = qq{$runs/stats.sh};
    
    open (EXPORT, qq{>$sh}) || die "[ERR]: can't open $sh $!\n";    
    print EXPORT  stats();    
    close EXPORT;

    system qq{cat $sh | $binaries/gargs -v --nlines 1 -p 1 "{}"\n}  if(!$dry_run);

}


sub stats {

    my $cmd = qq{cat $report/*.sequencing.stats.txt     \
                |$binaries/tsv-utils  view -d -         \
                |$binaries/tsv-utils reorder -          \
                <(cut -f1  $metadata{mapping_file})     \
                >$report/sequencing.stats.txt ;\n};
       $cmd =~ s/\s+\n\s+/ /msg;
    return $cmd;

}