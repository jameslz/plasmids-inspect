#!/usr/bin/perl -w

use strict;
use warnings;
use Getopt::Std;
use File::Basename;
use Cwd 'abs_path';

my $version = "0.0.2";

my %opts = (t => 'blastp',
            e => '1e-10',
            c => '56',
            i => '0',
            b => '60',
            m => 1,
            f => "6 qseqid stitle pident length mismatch gapopen qstart qend sstart send evalue bitscore",
            d => '/biostack/database/uniprot_sprot/blast/uniprot_sprot');

getopts('t:c:d:f:i:e:m:b:', \%opts);
&usage if (-t STDIN && @ARGV != 2);

my  $query          =  shift @ARGV;
my  $project_home   =  shift @ARGV;

my  $runs           =  qq{$project_home/runs};
my  $report         =  qq{$project_home/report};
my  $blast          =  qq{$project_home/blast};
my  $binaries       =  dirname( abs_path($0) ) . '/binaries';
my  $db             =  dirname( abs_path($opts{d}) ) . '../';
my  $cnt            =  0; 
my  $cpus           =  $opts{c}; 

submit();
exit;

sub submit{

    make_fs();
    shuffle_run();
    blast_run();
    pipe_run();
    auxiliary_run();

}

sub make_fs {
    
    my $cmd = qq{mkdir -p $report
                          $runs
                          $blast/split};
       $cmd =~ s/\n\s+/ /msg;
    system $cmd;

}

sub shuffle_run {

    my $sh = qq{$runs/shuffle.sh};
    open (EXPORT, ">$sh") || die "[ERR]: can't open $sh $!\n";

    print EXPORT shuffle();

    close EXPORT;
    system qq{bash $sh};

}

sub shuffle{

    my $cmd   = qq{$binaries/fastx-utils view      \
                      $query                       \
                   |$binaries/tsv-utils shuffle    \
                      -                            \
                   |$binaries/fastx-utils reorder  \
                      $query -                     \
                   >$report/shuffle.fasta;\n};
       $cmd   =~ s/\s+\n\s+/ /msg;
    return $cmd;

}

sub blast_run{
    
    my $sh =  qq{$runs/blast.sh}; 
       $cnt  = `$binaries/fastx-utils partition $report/shuffle.fasta $cpus $blast/split/p`;
    
    open (EXPORT, ">$sh") || die "$sh $!\n"; 
    foreach my $batch  (1 .. $cnt ){
        next if(!-e  qq{$blast/split/p\_$batch.fasta});
        print EXPORT blast( $batch );
    }
    
    close EXPORT;
    system qq{cat $sh | $binaries/gargs -v --nlines 1 -p $cpus  '{}'};

}

sub blast{

    my $batch   = shift;
    my ($blast_t, $db, $evalue, $outfmt, $maxhit) = 
                 ($opts{t}, $opts{d},$opts{e},$opts{f},$opts{m});
    
    my $blast  = qq{$blast_t  \
                      -query $blast/split/p\_$batch.fasta \
                      -db $db \
                      -out $blast/split/p\_$batch.blast \
                      -evalue $evalue   \
                      -outfmt '$outfmt' \
                      -max_target_seqs $maxhit \
                      -num_threads 1\n};
        $blast =~ s/\s+\n\s+/ /msg; 
    return $blast;

}

sub pipe_run {

    my $sh    =  qq{$runs/pipe.sh};
    open (EXPORT, ">$sh") || die "[ERR]: can't open $sh $!\n";

    print EXPORT  concat();  

    close EXPORT;
    system qq{cat $sh | $binaries/gargs -nlines 1 -p 1 '{}'};
}

sub concat {

    $opts{f}     = '6 qseqid stitle pident length mismatch gapopen qstart qend sstart send evalue bitscore' if($opts{f} eq '6');
    my @fields   = split /\s+/, $opts{f};
    
    if($fields[0] != 6){
        return  qq{cat $blast/split/*.blast >$blast/blast.txt; \n};
    }elsif($fields[0] == 6){
        shift  @fields;
        $fields[0] = '#'. $fields[0];
    }

    my $outfmt = join('\\t', @fields);
    my $cmd    = qq{cat $blast/split/*.blast            \
                      |$binaries/tsv-utils add_headline \
                      "$outfmt"                         \
                      -                                 \
                    >$blast/blast.txt ;\n};
       $cmd    =~ s/\s+\n\s+/ /msg; 
    return $cmd;

}

sub auxiliary_run {

    my $sh =  qq{$runs/auxiliary.sh}; 
    open (EXPORT, ">$sh") || die "[ERR]: can't open $sh $!\n";

    print EXPORT  tsv2xlsx();
    print EXPORT  qq{rm -rf $blast/split ;\n};

    close EXPORT;
    system qq{bash $sh};

}

sub tsv2xlsx {

    my $cmd = qq{$binaries/tsv-utils tsv2xlsx          \
                    $report/blast.xlsx                 \
                    blast:$blast/blast.txt;\n};
       $cmd =~ s/\s+\n\s+/ /msg; 
    return $cmd;

}

sub usage {
  
    printf STDERR qq(

Program: blast-kit: blast submit and parse protocol.
Version: $version
Contact: ZHANG LEI <zhanglei\@logicinformatics.com>\n
Usage:   blast-pipe [options] <sequence> <project>\n
Options: -t STR    blast type. blastx|blastp|blastn, default [blastp],
                   for special task, can do like this: 'blastn -task megablast'
         -c INT    CPU number, default: [56]
         -e double set evalue cutoff, default: [1e-10]
         -i double set identity cutoff for filter, default: [0]
         -f STR    set outfmt parameter, default: 
                   ['6 qseqid stitle pident length mismatch gapopen qstart qend sstart send evalue bitscore']
         -b double set bit score cutoff for filter, default: [60]
         -m INT    set max_target_seqs parameter, default: [1]
         -d STR    swiss-prot database location, default: [/biostack/database/uniprot_sprot/blast/uniprot_sprot]

);
    exit;

}
